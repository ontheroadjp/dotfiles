<?php namespace App;

use Illuminate\Database\Eloquent\Model;
use DB;
use Storage;

class WebImageSearch extends Model {

	private $json = '';
	private $album_id = '';
	private	$images = '';

	public function albums(){
		return $this->belongsTo('App\Album');
	}

	public function fetch($info) {
		// 各カウンタの初期化
		$page_count		= 0;
		$oppai_count	= 0;
		$newimgcount	= 0;

		// https://datamarket.azure.com/ > マイアカウント
		$accountKey = '0lg92hbP93ZoCA2h1lSX/iUnnE2OjFYX0VIVLLHugZw=';

		//while( $page_count <= $info['number'] ) {	 // 1ページあたり 50 枚
			$offset = $page_count * 50;
			$url = "https://api.datamarket.azure.com/Bing/Search/Image?"
				//					.'&Version=2.2'
				//					.'&Sources=Image'
				."Query='".urlencode( $info['kw'] )."'"
				."&Market='".$info['region']."'"
				."&Adult='off'"
				."&\$format=json"
				."&\$top=50&\$skip=".$offset;

			// リクエストの発行
			$context = stream_context_create(array('http' => array(
				'request_fulluri' => true,
				'header' => "Authorization: Basic ".base64_encode($accountKey.":".$accountKey )
			)
		));
			//} //end of while

		echo $url.'<br>';

		$res = file_get_contents( $url, 0, $context );
		$this->json = $res;

		$ref = json_decode( $res );
		$arr = $ref -> d -> results;

		if( !isset($this->album_id)){
			$this->album_id = -1;
		}

		$counter = 0;
		foreach( $arr as $img ) {
			$this->images[$counter++] = array(
				'image_id' => $img->ID
				, 'title' => $img->Title
				, 'media_url' => $img->MediaUrl
				, 'source_url' => $img->SourceUrl
				, 'display_url' => $img->DisplayUrl
				, 'width' => $img->Width
				, 'height' => $img->Height
				, 'file_size' => $img->FileSize
				, 'content_type' => $img->ContentType
				, 'album_id' => $this->album_id
			);
		}
		return $this->images;
	}

	public function download($urls, $dir){
	}

	public function store($images){
		if(!isset($images)) {
			return null;
		}

		$targets = array();

		//取得済みは除外
		$stored_url = DB::table('images')
			->where('album_id', $this->album_id)
			->lists('media_url');

		//JPEG/PNG以外は除外
		$ok = array(
			'image/jpeg',
			'image/png'
		);

		$count = 0;
		foreach($images as $img) {
			//取得済みは除外
			if(!in_array($img['media_url'], $stored_url)){
				if(in_array($img['content_type'], $ok)) {
					$targets[$count++] = $img;
				}
			}
		}
		//画像のDL
		$images = $this->getImages($targets);

		//URLをDBへ格納
		$results = array();
		$added = array();
		$not_added = array();
		
		foreach( $images as $img ){
			if($img['data'] <> ''){
				unset($images['data']);

				$val = Image::Create($img);
				$img += array('id', $val->id);
				if($this->saveImage($img)){
					$added[] = $img;
				}
				
			}else{
				unset($images['data']);
				$not_added[] = $img;
			}
		}
		$results = array(
			'fetched'=>$images,
			'added'=>$added,
			'not_added'=>$not_added
		);
		return $results;
	}

	private function loadImage($dir_name){
	}

	private function saveImage($img){
		$album = Album::find($img['album_id']);
		$save_dir = $album->name.'/';
		if(!Storage::exists($save_dir)){
			Storage::makeDirectory($save_dir);
			Storage::makeDirectory($save_dir.'thumbnail/');
		}
		$file_name = basename($img['media_url']);
		$file = file_get_contents($img['media_url']);
		if($file){
			Storage::put($save_dir.$file_name, $file);
			return true;
		}else{
			return false;
		}
	}

	function getImages( $images, $timeout = 0 ) {

		// ハンドルの作成
		$mh = curl_multi_init();

		for( $n=0; $n<count($images); $n++) {

			// cURL リソースの作成
			$conn[$n] = curl_init( $images[$n]['media_url'] );

			// オプションの設定
			curl_setopt( $conn[$n], CURLOPT_RETURNTRANSFER, 1 );
			if( $timeout ) { curl_setopt( $conn[$n], CURLOPT_TIMEOUT, $timeout ); }

			// ハンドルの追加
			curl_multi_add_handle( $mh, $conn[$n] );
		}

		// ハンドルの実行
		$active = null;
		do {
			$mrc = curl_multi_exec( $mh, $active );
		} while ( $mrc == CURLM_CALL_MULTI_PERFORM );

		while( $active and $mrc == CURLM_OK ) {
			if (curl_multi_select($mh) != -1) {
				do {
					$mrc = curl_multi_exec( $mh, $active );
				} while ($mrc == CURLM_CALL_MULTI_PERFORM);
			} 
		}

		//データを取得
		for($n=0; $n<count($images); $n++) {

			if(($err = curl_error($conn[$n])) == '') {
				$images[$n] += array(
					'data' => curl_multi_getcontent($conn[$n])
				);
			} else {
				$image[$n] += array(
					'data' => '',
					curl_multi_remove_handle($mh, $conn[$n])
				);
			}

			curl_close($conn[$n]);
		}

		curl_multi_close($mh);
		return $images;
	}

	public function getJson(){
		return $this->json;
	}

	public function getImagesAsArray(){
		return $this->images;
	}

	public function setAlbumId($id){
		$this->album_id = $id;
		}

	public function getAlbumId(){
		return $this->album_id;
	}	
}



