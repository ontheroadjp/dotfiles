覚書_DB操作// --------------------// トランザクションの処理（例1）// --------------------$table = Table::find(1);DB::transaction( function() use($table) {	// Insert とか Update の処理	$table->save();} );※ DB処理以外を DB::transaction の中に書かないこと。// --------------------// トランザクションの処理（例2）// --------------------DB::transaction(function(){    $newAcct = Account::create([        'accountname' => Input::get('accountname')    ]);    $newUser = User::create([        'username' => Input::get('username'),        'account_id' => $newAcct->id,    ]);});// --------------------// データの取得(Eloquent)// --------------------$posts = Post::all(); // 全て取得$posts = Post::get(); // クエリー結果が複数の場合$post = Post::first(); // 最初の1件だけを取得$post = Post::firstOrCreate(); // なければ新規作成$post = Post::find(id); // 主キー指定して1件取得$post = Post::where('title', '=', 'ほげ')->first(); // WHERE句$posts = Post::where('votes', '>', 100)->take(10)->get(); // WHERE句foreach( $posts as $post ) {	echo $post->title;}// --------------------// 特定のカラムのみ取得 // --------------------$titles = Post::get( ['title', 'body'] );$titles->toArray();// --------------------// カラムへのアクセス(結果が1件の場合)// --------------------echo $post->title; (  または、echo $post['title'];  )※ 事前にチェック必要// --------------------// カラムへのアクセス(結果が複数の場合)// --------------------$posts = Post::all();foreach( $posts as $post ) {	echo $post->title;}※ 事前にチェック必要// --------------------//カラムアクセスの事前チェック// --------------------if( count($post) != 1 ) App::abort( 404, 'ページが見つかりません' );echo $post->title;もしくは例外投げる$post = Post::findOrFail($id );echo $post->title;例外処理は通常、start/global.php の中に書くuse Illuminate¥Database¥Eloquent¥ModelNotFoundException;App::error(function(ModelNotFoundException $e){	return Response::make('見つかりません', 404);} );// --------------------// 件数のチェック// --------------------$posts = Post::all();echo count( $posts );// --------------------// 結果が0件の場合に例外処理したいとき// --------------------$post->findOrFail();$post->firstOrFail();//-------------------------------------------------------------------// クエリービルダー//-------------------------------------------------------------------・ insert()の戻り値は、挿入の成否の論理値・ update()の戻り値は、影響を受けたレコード数・ delete()の戻り値は、影響を受けたレコード数//-------------------------------------------------------------------// Eloquent//-------------------------------------------------------------------// --------------------// 新規レコード追加（insert その1）// --------------------$post = new Post();$post->title = "ほげ";$post->body = "本文";$post->save();※ save()で挿入する場合、戻り値は成否フラグ// --------------------// 新規レコード追加（insert その2）// --------------------$apple = Apple::create( array( 'name' => 'ふじ' ) );echo $apple->id;	// 今回作成されたレコードのidecho $apple->name;	// 'ふじ'// DB から取得（なければ新規作成）$apple = Apple::firstOrCreate( array( 'name' => 'ふじ' ) );※ create()で挿入する場合、戻り値は新しく生成したオブジェクト※ create() 使う場合には対象のモデルに、protected $filable(array('name')); が必要※ $filable が無いと MassAssignmentExceptionが出る// --------------------// レコードの更新（update）// --------------------・ 更新処理は、一度レコードを取得し、その内容を書き換え、save()する・ save()を使用するので、先の挿入処理と同様に、成否フラグが返ってくる。// --------------------// レコードの削除（delete その1）// --------------------・ 削除はその方法により、戻り値が異なる・ 一番基本となるのは、一度レコードを取得し、削除する方法（戻り値は成否フラグ）$apple = Apple::find( $id );$result = $apple->delete();// --------------------// レコードの削除（delete その2）// --------------------・ アクティブレコードと同様に、whereで条件を指定し、該当するレコードを複数削除できる（戻り値は影響を受けたレコード数）$affectedRecode = Apple::where('name', '紅玉')->delete();// --------------------// レコードの削除（delete その3）// --------------------・ キー指定による複数レコード削除も可能（戻り値はなし）Apple::destroy( 1, 2 );